SplitStream:
  Make function on ChannelId to return the first digit.
  Make tutorial explain how to subscribe to more/less than 16 stripes.
  Make stripe report subscribeSuccess.

make the lookup table come from the protocol version at the beginning of the socket

Regression tests:
  make test that RouteMessage is not received when not ready
  but that it is received when it is sent directly, test for all 3 routing conditions
    do this by grabbing the node's leafset, and killing a neighbor then immeadiately routing,
    do this via continuations, or whatever, so that it is single threaded
optimization on isReady(): make it accept the messages for the side that is ready?
  test old versions of the route message
  test logging of endpoint

look at NodeHandle.isLocal() and make sure it takes into account the epoch.
PastryEndpoint.enrouteMessage() is probably never called, if it isn't, maybe make it called in receiveMessage() or better yet, make it called in PastryAppl.forward() (?? what is this method called)

Scribe:
  Make subscribe() go to the specific parent when the node Joins, to aviod consistency problem.  See "Re: [FreePastry] scribe tutorial for pastry 1.4.4", April 25th
    add regression test
  "Received our own subscribe message ... not the root."  Make sure that a subscribeFailed() is called, not sure if it should just wait for the timeout or not, because maybe the node is going to fail, or ... why is this getting called?

  If we just want it to use a SubscribeMessage for every topic what do we do?
    This could help with reverse compatibility too...
      flag for protocol version 0?

  Regr Test:
    test that TopicManagers get collected when everyone unsubscribes
    test that pending/roots is correct
    test that clientConverters are collected
    test subscribeSuccess(), set a boolean and check it in all the clients
    test that deleteObserver is called when the node goes faulty
    
  HammerTest:
    use Random(55) to generate a list of the same random topics of size M on each node
      have nodes subscribe to N of the M topics randomly
        in bulk at first 
        used biased selection process to make a diversity of group sizes
      nodes have churn within the scribe groups:
        record how fast subscribe/unsubscribe happens
        subscriptions change in batches, not just 1 at a time
    root publishes periodically on all of its topics, and accelerates over the course of the experiment.  Places the rate/seq in the PublishMessage
      nodes keep track of when they subscribed.  If the seq is not zero, then they should have gotten a message
      also make a timer on the minimum publish rate, so we no if someone isn't publishing
    come up with some other way to determine publish success rate other than just the root, so that other nodes can publish
    record the join time/exit time
    select a churn rate
    use the consistency test, and break it up into an AbstrstPlanetLabStressTest
      make it an option to record consistency information 

  look at splitscream's policy and see if it does the right thing, make sure it handles multi-subscribe messages, esp the call to addChild()
  aggregate setPathToRoot() if possible
    make sure it doesn't get called unless there is a real change
    make SubscribeAckMessage => PathUpdateMessage
  make ScribeImpl not use java serialization at all
    make JavaScribeImpl that extends ScribeImpl and uses Java Serialization
  Is SubscribeMessag really an AnycastMessage?  Investigate how it is treated as an AnycastMessage
  security: use Random number, rather than sequence in the SubscribeMessage
  wrap the collections with unmodifiableFoo() everywhere
  look at synchronization of allParents/allChildren
  make pathToRoot() be NodeHandles, not Ids (does this buy us anything? is it better for security?)
    change SubscribeAckMessage serialization.  Make array of NodeHandles, then index them in the path.
  make getAllTopicsByParent() handle null, and this.  If you are the parent, replace with null.  For performance, make a separate hashtable for the topics you are the root of.
  split SubscribeAckMessage +=> PathToRootChangeMessage
  tons of parallel data structures that are updated all over the place:
    topicmanager.destroy() rather than deleteObserver(),topics.remove(), can also Drop all children if there are any and deleteObserver() from all of them.  Though, this is usually an error to destroy() the topicmanager if there are children.
  do we want this to drop the message for consistency?  I suppose the tree could get built with 2 roots, prolly should
  ScribeImpl.deliver():MaintenanceMessage:}else{:Make this call sendSubscribe() not route(ScribeMessage)
    maybe should make sendSubscribe() smart, to not issue multiple outstanding subscribes before a failure occurs, esp if we have the request to the same parent already pending
  See what the deal with "inspite of NOT being root" is, and why it happens.  Did it use to happen?
  Clean up forward()/deliver()
  Who should get the AnycastFailureMessage?  The client?
    Should SubscribeFailedMessage extend AnycastFailureMessage to make code simpler?
    Why is the anycast failed sent in so many different places?
    Consider moving this to SAAR.  
      Can this happen inside the ScribePolicy.directAnycast() if there are no more nodes to try to go to?
  Look into implicit joining of the root, see if there is a way to shrink this.     How does path to root get updated?

Integrate Animesh's scribe:
  find way to merge the old maintenance mechanism (route subscribe up) with new one (heartbeats)

  examine imports:
    take out any replay junk
    take out references to PastryNode
  ScribeImpl:
    check serialization
    make Maintenance work for big groups (SubscribeMessage contains a group of messages)
    Find those other issues/notes with scribe, about the potential for a long head on the tree in a time of growth.  (look for the word implicitly)
    Should the intervals be topic-specific?  This could give more fexibility, perhaps ScribeImpl still holds defaults.
      maybe they should be topic-specific, but for now, put them in the policy, so they are only ScribeImpl specific, not global
 
    I don't understand why we took out the SubscribeLostMessage on line ~402 in sendSubscribe()
      as well as removing the addition to "lost"
      // There is a bug in Freepastry where if a message is routed with a hint
      // equal to itself then even if the node is not the destimation for the id
      // field, the deliver() method will be called

     Forward/Reverse = think about naming upwardUpdate downwardHeartbeat
       these are just used for tracking purposes
      
    look carefully at forward() to see what animesh is doing here

    update():
      there is a return in the first block, that is not in animesh's code, // removed the return

  AnycastMessage:
    why remove addVisited() in constructor?  Can just have initialRequestor be first...
      I'm worried about changing the semantics of Scribe will break existing applications
    addFirstForced() ? not called anywhere, do we need this? yes, one of the policies uses it
    deliver():
      what to do about that SaarContent thing? (line 1503 in animesh's code)
      ExplicitDepartNotificationMessage
        .markDeadForever()  ... how to handle this?
      addFirst()

Integrate Tobias's log4jmanager
Make Readme point to the ProtocolSpec.txt

Why does that regression test keep failing?
  prolly not waiting long enough.

look at emails for most popular applications
  Past: 208 40 fabio.varesano@gmail.com freepastry@googlemail.com jstewart@mpi-sws.mpg.de dav176fr@yahoo.fr pintux@crs4.it milane@di.unito.it jmnisha@gmail.com reim@informatik.hu-berlin.de derDoc@gmx.de philipp.stockhammer@tu-clausthal.de enigmatic2002@gmail.com francesquini@gmail.com c.sergio@gmail.com jstewart@rice.epostmail.org mail.wli@gmail.com jstewart@cs.rice.edu svk@quantumleap.us jstewart@mpi-sb.mpg.de Gabriel.Vasile@inria.fr ntarmos@ceid.upatras.gr papagdim@ceid.upatras.gr jeffh@cs.rice.edu michel.oey@gmail.com maragkod@ceid.upatras.gr babis85@freemail.gr npoirot.ext@rd.francetelecom.com loupasak@ceid.upatras.gr liangsteve@gmail.com daniel.weber@in.tum.de rahohe@gmail.com johannou@ifi.uio.no amislove@mpi-sws.mpg.de pleng_c@hotmail.com iamnoah@gmail.com luigi@diacronic.org jane.summerxie@gmail.com jeffh@mpi-sws.mpg.de andrehoe@uni-paderborn.de kathayat_lai@yahoo.com almamou@mi.fu-berlin.de
  Scribe: 130 33 fabio.varesano@gmail.com freepastry@googlemail.com jstewart@mpi-sws.mpg.de uchikubi@gmail.com dav176fr@yahoo.fr prithula@yahoo.com enigmatic2002@gmail.com francesquini@gmail.com animesh@cs.rice.edu jstewart@rice.epostmail.org jeffh@rice.edu jstewart@cs.rice.edu svk@quantumleap.us michal.ejdys@gmail.com jstewart@mpi-sb.mpg.de thomas.darcet@mines.inpl-nancy.fr jeffh@cs.rice.edu ss47314029@hotmail.com brinksmeier@upb.de npoirot.ext@rd.francetelecom.com SuryaBahadur.Kathayat@ait.ac.th mac.ibook@gmail.com firefly8003@gmail.com luigi@diacronic.org ss47314029@163.com jane.summerxie@gmail.com jeffh@mpi-sws.mpg.de emg@quantumleap.us kathayat_lai@yahoo.com kav@it.edu dsandler@cs.rice.edu bzahler@students.unibe.ch jean.f.cloutier@gmail.com
  Splitstream: 45 10 freepastry@googlemail.com jstewart@rice.epostmail.org lufe@jd06-coah.ife.org.mx mindtriggerz@gmail.com jeffh@mpi-sws.mpg.de npoirot.ext@orange-ft.com thomas.darcet@mines.inpl-nancy.fr shwlai@gmail.com Andrea.Busa@diit.unict.it mac.ibook@gmail.com

spec out transport layer
PR overhead under attack
Constrained Routing Table Pseudocode
  cost of CRT:
    a) Joining from multiple bootstraps
    b) Maintenance overhead (how do we actually exploit CRT symmetry?)
    
update andreas' codebase
update version numbers, tag



documentation:
  Tutorials:
    Scribe Policies
    update all simulation tutorials to use the new maxSpeed mechanism
    update tutorial 7 to include xmlpp...
    Document NetworkListener/SimulatorListener in simulator/socket. (tutorial?)
    
  pseudocode: for all the FP alogorithms (request by ahae)
  
  bandwidth analysis spreadsheet
    compare with planetlab/simulator  
    Update/review Bandwidth Estimator    
  leafSet is more reliable near you, less reliable away from you
  New Features

  go through bug database
  review/update wikipedia entry on Pastry/FreePastry
  
small projects:
  play with findbugs more
  consider replacing RedBlackMap as Kasper suggests 11/17/06
  see if routing table is an observer on the NodeHandle... mayhap it should be, but will break my routing table test.  Maybe a flag to disable this.
    does this work in the simulator?
  reuse initiation sockets (see response to Luigi's message Dec 8th.)
  make coalesce() work across nodes in socket
  Get InitiateJoin, InitiateLeafSetMaint, InitiateRouteSetMaint out of DistPastryNode, DirectPastryNode
    make joinEvent.cancel() be called after first JoinMessage is received.
      move leafSetMaintFreq/routeSetMaintFreq to the protocols
  TimerTask.cancel() remove immeadiately from the list
    // better memory management, long term tasks such as the periodic routing tabel, or the partition manager cause the destroy() methods to take a long time before the nodes can be garbage collected
  make it optional for the PastryAppl to register as leafset/rt listener
  in Socket Protocol, if they use an exception make sure fp can be reconfigured to handle it at runtime and retry
    ex can't bind to the port, make it possible to handle the exception and proceed
  make a listener for IdRange (see "potential commonapi feature" Jeff Hoye, 2:45pm July 31st)
    just notify when IdRange may have changed, maybe you can do the range, consider other topologies to keep leafset seperate
	routing table simulations again?  
	  look at rt simulations on odins, see that results are still the same with the new code, maybe use the simpler leafset protocol, see if it differs, since it is so much faster
	  RT - Make sure the back-propegation of the routing table hole filling still works (maybe add it to the ACK).  Note that there could be a timing issue here because of the suspected stuff, however the best strategy to this may just be to add more routing table entries (per pigeon-hole).  Simulate to see if the periodic maintenance does anything for you.
	  Routing Table Quality:
	    Still getting comprehensive results of factors of routing table quality.  Have extensive results for 100-1000 nodes.  Waiting for more CPU time on the cluster.  
   Why does the firewall test fail in planetlab sometimes?
     also, make sure to test both udp/tcp
   Strange leafset collapse issue:
     If there is no "left(-most) neighbor", make it probe the first neighbor on the right    
	nightly build:
	  check on deprecation messages when build
	  more automated tests    
	  egrep -r 'logger\.level' src/rice | egrep -v '<=' | wc -l // should be zero
	  egrep -r 'com\.sun\.rsasign\.r' src/rice | wc -l // should be zero
	  Past put/get hammer. 
		get the NAT test (uml linux) 
		  in the repository
		  in the nightly regression
    some script to complain when code isn't pretty  
    check for no tabs, no dos files
    emacs formatting to all java files
    binary versions of the wireshark plugin (windows, linux, mac)      
	update consistency viewer/automate test/scripts more
	  see why the html/visual colors are different  
  	gnuplot> load "~/planetlab/plcons/splitstream.plot"

major project outlines
  security:
    certificate service (make sure is compatible with PR,ePost,SSL) // this is not the implementation of the CA, just the ability to use Certificates in FP
      Evaluate the cost of Checking Certified node Ids   
      revokation   
    SSL option?: (TCP Hijack, Sniff Traffic) (have key distribution problem)
    look for problems that can compromise/take_down a pastry node (bugs/implementation limitations, not algorithimic issues)
	    Socket Layer:
	      Better management of FileDescriptors (current impl can be clobbered by opening lots of sockets and not writing data, creates too many FDs and causes FP to crash in some random location.)
	 			Buffer Overflow? (In Java this would be an OutOfMemoryError by allocating too large a message buffer.)
	 			Bogus liveness updates via source routed nodes?
	 			  don't use timestamps in the message, rather a hash-code.  This prevents nodes from claiming long liveness in the future
	 			  forged WrongEpochAddressMessage
	 			FD overflow
	 			  Bogus streams that do something nasty, or take up FDs forever
	 			Attacks on Node State:
	 			  verify integrity of data in leafset/rt, cant be filled with bogus values by using certificates that have expirations and assume loosely synchronized clocks?
	 			  attacks on consistency?  not source routing?  PR?	 			  
	 			Enforce closed network:
	 			  TCP, but use Certs
	 			  SSL (also use certs)
	    Service Layer:
	      examine Scribe/Past for sources of Attack...	      
 		Pastry Layer (protocol additions):	   
      Secure Routing Primitive
        make sure to add it to the endpoint.localLookup()
      PeerReview
      Eclipse Resistance    
    State machine/protocol compliance: PeerReview 
      Evaluate cost of PeerReview
        in various attacks, such as ignoring all messages except from the witnesses
    Secure Routing/Bobby's thing
      CRT - See if this can be made completely push based.  The theory being that both malicious and correct nodes want to get themselves added to routing tables.  Note that we will need to do a push both on Join and Leave.  Because of symmetry, you can figure out who to notify when your leafset changes.  Need to consider how much redundancy to use.
      Constrained Routing Table Pseudocode
        cost of CRT:
         a) Joining from multiple bootstraps
         b) Maintenance overhead (how do we actually exploit CRT symmetry?)
             
  services:  
    survey of email traffic by project type/downloads (to determine project priority)
    Past: make past/replication work with multi-writers
      Fix bugs
      need to discuss with ahae on what technique to use
        Use hash-trees?
        time-based queues?
      better handle extremes:
        lots of tiny objects
        a few large objects (movies?)

    Scribe: saar/scribe/splitstream enhancements
      scribe notes:
			  default scribe policy per instance (and a default default)
			    consider no client-specific policy (perhaps only a policy for anycast, not for membership)
			  make sure we have policy chaining for anycast for multiple clients on the same node
			  consider (and see if we already have) a mechanism to repair long chains in pathological condition of root chaining
			  need to add subscribeSuccess() to the interface
    Post: detangle with epost, add to distro
    make/observer hammer tests for all FP services
      Past Hammer
      Scribe Hammer
      Automated:
        Add existing regression tests to nightly build
        Build framework for clusterwide/planetlab-wide regression tests
    Visualization/Control interface application
      allow to dynamically change log levels, introspect nodes etc (can leverage epost code?)
    
  more transport layer improvements:
    detangle transport layer better (so it could be used in other KBR protocols, and to make PR easier to use, and so FP is more "hackable" by researchers, and so FP is more modular/maintainable):
      the transport layer would provide:
        a) sending/queuing messages
          - priority
          - ability to return messages back to pastry if liveness changes while message is queued
              specify reroute parameter when you call send(), (eg, reroute on suspected/faulty/drop on faulty)
          - ability to ask how full a queue is
          - could add additional params such as UDP, SSL, signatures, sign w/ passport etc, note that these will have to be included in the RouteMessage, at least the UDP flag
              UDP support (I feel this is necessary for games, VoIP, some streaming apps, and pretty easy to add considering the binary protocol)
                What should the programmer interface be?  Similar to App-Level Sockets?
          - sourcerouting (via a strategy for next hops, currently based on the leafset)
        b) liveness
        c) proximity (via a modular strategy)
             export proximity() strategy
        d) Tap interfaces (listeners/strategy) which would make it easier to sign/monitor/ban bandwidh for services such as PR
    play with STUNT/livewire udp thing
      add a strategy to the transport layer for opening sockets 
        (allows possible integration with stunt, may make source-routing more powerful)?
		  the new idea is that the UDP hole punching works much more.  Livewire has a free library to emulate TCP over UDP.    

  performance:
    Accordion - Good idea, just make sure that common api exposes the "no-shortcuts" flag in routing.  This can be useful.
		  add Neighbor Caching (like Accordion, SSR, ties into previous idea)
		    // may need strategy pattern, to decide who to keep
    make consistency algorithm adaptive

    
Secure Lookup:
  Can we design a version w/o the single key problem?  Maybe, w/ a hierarchy?
  What is evaluation with Secure Routing.

