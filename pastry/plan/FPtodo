documentation:
  wireshark (document that this is gpl, not freebsd-based)
  Tutorials:
    setDaemon() does the opposite of what is described in FreePastry.
    rawserialization tutorials
    SplitStream
    Scribe Policies
    Environment      
    update all simulation tutorials to use the new maxSpeed mechanism
    build a tutorial to use new features: appsockets, raw serialization, forwarding, direct
    update tutorial 7 to include xmlpp...
    switch preview tutorials to official tutorials
    Document NetworkListener/SimulatorListener in simulator/socket. (tutorial?)
    
  diagrams:
    make visio diagrams available
		PeriodicLeafSetProtocol:
		  This protocol allows reception of messages in FreePastry only when it can ensure that the 2 nearest neighbors know of our existence.	  
		  Definitions:
		    Ready: we authorize the receipt of messages in FreePastry.
		    NOW: the current time
		    TAO: the lease period	    
		  Assumptions:
		    Consistent local clock: the clock doesn't irratically change time, but maintains a consistent (but unknown) offset to some global clock.
		  Non-assumptions:
		    Synchronized Clocks	    
		  The mechanism:
		    For each nearest neighbor (the left and right):
		       We keep a minimum bound on their knowledge of our existence:
		         Periodically send LeafSetRequest(LSR) with a timestamp.
		         Reception of a BroadcastLeafSet(BLS) (the response to the LeafSetRequest) will contain the timestamp from the LSR.
		         To be "ready" we must have received the BLS such that NOW-timestamp that is less than TAO	      
		  Invariant:
		    To receive messages, I must: have a response from my neighbor who's timestamp is less than 30s old.  The timestamp is the echo of the request.  
		    To receive messages, you need to know that your neighbors know of you, and that they agreed that you were the direct neighbor    	    
        
  pseudocode: for all the FP alogorithms (request by ahae)
  
  bandwidth analysis spreadsheet
    compare with planetlab/simulator  
    Update/review Bandwidth Estimator    
  leafSet is more reliable near you, less reliable away from you
  New Features
		PeriodicLeafSetProtocol:
		  This protocol allows reception of messages in FreePastry only when it can ensure that the 2 nearest neighbors know of our existence.	  
		  Definitions:
		    Ready: we authorize the receipt of messages in FreePastry.
		    NOW: the current time
		    TAO: the lease period	    
		  Assumptions:
		    Consistent local clock: the clock doesn't irratically change time, but maintains a consistent (but unknown) offset to some global clock.
		  Non-assumptions:
		    Synchronized Clocks	    
		  The mechanism:
		    For each nearest neighbor (the left and right):
		       We keep a minimum bound on their knowledge of our existence:
		         Periodically send LeafSetRequest(LSR) with a timestamp.
		         Reception of a BroadcastLeafSet(BLS) (the response to the LeafSetRequest) will contain the timestamp from the LSR.
		         To be "ready" we must have received the BLS such that NOW-timestamp that is less than TAO	      
		  Invariant:
		    To receive messages, I must: have a response from my neighbor who's timestamp is less than 30s old.  The timestamp is the echo of the request.  
		    To receive messages, you need to know that your neighbors know of you, and that they agreed that you were the direct neighbor    	    
    Explain what exactly is the algorithm for the Consistent Join Protocol 
	  other:      
	    go through bug database
	    review/update wikipedia entry on Pastry/FreePastry
  
  
play with findbugs more

small projects:
  consider replacing RedBlackMap as Kasper suggests 11/17/06
  see if routing table is an observer on the NodeHandle... mayhap it should be, but will break my routing table test.  Maybe a flag to disable this.
    does this work in the simulator?
  reuse initiation sockets (see response to Luigi's message Dec 8th.)
  make coalesce() work across nodes in socket
  Get InitiateJoin, InitiateLeafSetMaint, InitiateRouteSetMaint out of DistPastryNode, DirectPastryNode
    make joinEvent.cancel() be called after first JoinMessage is received.
      move leafSetMaintFreq/routeSetMaintFreq to the protocols
  TimerTask.cancel() remove immeadiately from the list
    // better memory management, long term tasks such as the periodic routing tabel, or the partition manager cause the destroy() methods to take a long time before the nodes can be garbage collected
  make it optional for the PastryAppl to register as leafset/rt listener
  in Socket Protocol, if they use an exception make sure fp can be reconfigured to handle it at runtime and retry
    ex can't bind to the port, make it possible to handle the exception and proceed
  make a listener for IdRange (see "potential commonapi feature" Jeff Hoye, 2:45pm July 31st)
    just notify when IdRange may have changed, maybe you can do the range, consider other topologies to keep leafset seperate
	routing table simulations again?  
	  look at rt simulations on odins, see that results are still the same with the new code, maybe use the simpler leafset protocol, see if it differs, since it is so much faster
	  RT - Make sure the back-propegation of the routing table hole filling still works (maybe add it to the ACK).  Note that there could be a timing issue here because of the suspected stuff, however the best strategy to this may just be to add more routing table entries (per pigeon-hole).  Simulate to see if the periodic maintenance does anything for you.
	  Routing Table Quality:
	    Still getting comprehensive results of factors of routing table quality.  Have extensive results for 100-1000 nodes.  Waiting for more CPU time on the cluster.  
   Why does the firewall test fail in planetlab sometimes?
     also, make sure to test both udp/tcp
   Strange leafset collapse issue:
     If there is no "left(-most) neighbor", make it probe the first neighbor on the right    
	nightly build:
	  check on deprecation messages when build
	  build actual release  
	  automated tests    
	  egrep -r 'logger\.level' src/rice | egrep -v '<=' | wc -l // should be zero
	  egrep -r 'com\.sun\.rsasign\.r' src/rice | wc -l // should be zero
	  Past put/get hammer. 
		get the NAT test (uml linux) 
		  in the repository
		  in the nightly regression
    some script to complain when code isn't pretty    
	update consistency viewer/automate test/scripts more
	  see why the html/visual colors are different  
  	gnuplot> load "~/planetlab/plcons/splitstream.plot"

major project outlines
  security:
    certificate service (make sure is compatible with PR,ePost,SSL) // this is not the implementation of the CA, just the ability to use Certificates in FP
      Evaluate the cost of Checking Certified node Ids      
    SSL option?: (TCP Hijack, Sniff Traffic) (have key distribution problem)
    look for problems that can compromise a pastry node (bugs/implementation limitations, not algorithimic issues)
	    Socket Layer:
	      Better management of FileDescriptors (current impl can be clobbered by opening lots of sockets and not writing data, creates too many FDs and causes FP to crash in some random location.)
	 			Buffer Overflow? (In Java this would be an OutOfMemoryError by allocating too large a message buffer.)
	    Service Layer:
	      examine Scribe/Past for sources of Attack...	      
 		Pastry Layer (protocol additions):	   
      Secure Routing Primitive
      PeerReview
      Eclipse Resistance    
    PeerReview
      Evaluate cost of PeerReview
        in various attacks, such as ignoring all messages except from the witnesses
    Secure Routing/Bobby's thing
      CRT - See if this can be made completely push based.  The theory being that both malicious and correct nodes want to get themselves added to routing tables.  Note that we will need to do a push both on Join and Leave.  Because of symmetry, you can figure out who to notify when your leafset changes.  Need to consider how much redundancy to use.
      Constrained Routing Table Pseudocode
        cost of CRT:
         a) Joining from multiple bootstraps
         b) Maintenance overhead (how do we actually exploit CRT symmetry?)
             
  services:  
    survey of email traffic by project type/downloads (to determine project priority)
    Past: make past/replication work with multi-writers
      Fix bugs
      need to discuss with ahae on what technique to use
        Use hash-trees?
        time-based queues?
      better handle extremes:
        lots of tiny objects
        a few large objects (movies?)

    Scribe: saar/scribe/splitstream enhancements
      scribe notes:
			  default scribe policy per instance (and a default default)
			    consider no client-specific policy (perhaps only a policy for anycast, not for membership)
			  make sure we have policy chaining for anycast for multiple clients on the same node
			  consider (and see if we already have) a mechanism to repair long chains in pathological condition of root chaining
			  need to add subscribeSuccess() to the interface
    Post: detangle with epost, add to distro
    make/observer hammer tests for all FP services
      Past Hammer
      Scribe Hammer
      Automated:
        Add existing regression tests to nightly build
        Build framework for clusterwide/planetlab-wide regression tests
    Visualization/Control interface application
      allow to dynamically change log levels, introspect nodes etc (can leverage epost code?)
    
  more transport layer improvements:
    detangle transport layer better (so it could be used in other KBR protocols, and to make PR easier to use, and so FP is more "hackable" by researchers, and so FP is more modular/maintainable):
      the transport layer would provide:
        a) sending/queuing messages
          - priority
          - ability to return messages back to pastry if liveness changes while message is queued
              specify reroute parameter when you call send(), (eg, reroute on suspected/faulty/drop on faulty)
          - ability to ask how full a queue is
          - could add additional params such as UDP, SSL, signatures, sign w/ passport etc, note that these will have to be included in the RouteMessage, at least the UDP flag
              UDP support (I feel this is necessary for games, VoIP, some streaming apps, and pretty easy to add considering the binary protocol)
                What should the programmer interface be?  Similar to App-Level Sockets?
          - sourcerouting (via a strategy for next hops, currently based on the leafset)
        b) liveness
        c) proximity (via a modular strategy)
             export proximity() strategy
        d) Tap interfaces (listeners/strategy) which would make it easier to sign/monitor/ban bandwidh for services such as PR
    play with STUNT/livewire udp thing
      add a strategy to the transport layer for opening sockets 
        (allows possible integration with stunt, may make source-routing more powerful)?
		  the new idea is that the UDP hole punching works much more.  Livewire has a free library to emulate TCP over UDP.    

  performance:
    Accordion - Good idea, just make sure that common api exposes the "no-shortcuts" flag in routing.  This can be useful.
		  add Neighbor Caching (like Accordion, SSR, ties into previous idea)
		    // may need strategy pattern, to decide who to keep
    make consistency algorithm adaptive

    
    