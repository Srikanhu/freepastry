FreePastry 2.0 Serialized Message description version 0:

All numbers are in Network (Big) Endian
byte = 8 bits
sort = 2 bytes
int = 4 bytes
long = 8 bytes
float = 4 bytes
double = 8 bytes

Hard Coded values: 

NodeId bit length 160
Routing Table Base Bit Length 4 


background:
  FreePastry provides a structured peer to peer routing overlay, but is not necessarally useful in of itself.  Application layers must be written on top of FreePastry.  We will call the layer above FreePastry an Application.  This application may implement a DHT (such as Past) or a Multicast Network (such as Scribe) which higher level applications may further be written on.
  FreePastry uses Source Routing to handle temporary network anomlies.  
  FreePastry uses TCP for all overlay maintenance and application traffic.
  FreePastry uses UDP for liveness checks.
  FreePastry provides a mechanism for Applications to open thier own sockets through the source routes.  This allows applications to manage their own congestion control without interfering with overlay maintenance.  However normal messages may be sent on the same sockets as overlay maintenance traffic.  Application 0 is a FreePastry control socket, and is not delivered to an application.
  From an application's perspective, the abstraction for an node in FreePastry is the NodeHandle.  
  FreePastry interacts with other nodes in the network using EpochInetSocketAddresses.  The EpochInetSocketAddress is based on IPv4 and encodes an IP address, a port, and an 8byte epoch.  The purpose of the epoch is to know if the node has rebooted since last communication.  This gives information to the applications (that may be stateful) about the state of the node.

  Here is the format for an EpochInetSocketAddress:
  
  EpochInetSocketAddress: (IPV4 FreePastry Version 0):
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  + Inet Address                                                  +
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  + port (int)                                                    +
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  + epoch (long)                                                  +
  +                                                               +
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      
With this information, here is the TCP stream header:

  0 or more of the following based on the number of hops in the sourceroute:
  byte[4] HEADER_SOURCE_ROUTE = {0x19, 0x53, 0x13, 0x00}
  EpochInetSocketAddress next hop
  
  byte[4] HEADER_DIRECT = {0x06, 0x1B, 0x49, 0x74}
  int appID // 0 is normal pastry socket, needed for both direct or source routed sockets
  // non-zero then opens up the socket to the app

  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ =}
  +                   HEADER_SOURCE_ROUTE                         +   }
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   }
  +            Next Hop (EpochInetSocketAddress)                  +    > // zero or more 
  +                                                               +    >           
  +                                                               +   }           
  +                                                               +   }           
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ =}
  +                      HEADER_DIRECT                            +   
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   
  +                          AppId                                +   
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   
  +                                                               + 
  +                  <Application Stream>                         + 
  +                                                               + 
  +                           ...                                 + 

  
address (int) : the application in the Overlay that the message goes to
type (short): the type of message (application dependent)
  however type 0 is reserved for Java Serialized (or platform dependent) messages

Any message has an optional parameter: Sender  
  
Route Messages are special messages that wrap other messages.  Here is their format.  


/********** FreePastry Core ************/

/********** Objects ***************/
NodeHandle
Leafset
RouteSet
Id
NodeId

/********** Messages **************/

/******************* Route Message ******************/
RoueMessage:
  address: 0xACBDFE17 (Router)
  type: -23525
  use: To route messages using prefix-based-routing.
  package: rice.pastry.routing

  format:
    byte version(0)  
    int subMessageAddress
    Id target
    NodeHandle prevHop
    
    // the internal message:
    boolean hasSender
    byte priority
    short type
    // if hasSender 
      NodeHandle internalSender
    Message internalMsg

/****************** Join Protocol ******************/	      
JoinRequest:
  address: 0xe80c17e8 (Join Protocol)
  type: 2
  use: During bootstrap, to find the nearest node to you in Id Space.
  package: rice.pastry.standard
  
  format:
	  byte version (0)
    byte rtBaseBitLength
    NodeHandle handle
    boolean hasJoinHandle
      NodeHandle joinHandle // if hasJoinHandle
    // the table
    byte lastRow // decremented on a push call
    // the routing table has this many rows: (NodeId bit length)/rtBaseBitLength = 160/4 = 40
    // and this many columns 2^rtBaseBitLength = 2^4=16
		// each entry is a RouteSet
		// for each row
		  boolean hasRow?
		  // if (hasRow) for each column {
		    boolean hasColumn
  		  // if (hasColumn) for each entry {
  		    RouteSet entry
  		  // }
  		// }    
    boolean hasLeafset
		// if (hasLeafset) 
		  LeafSet leafset
          
ConsistentJoinMessage:
  address: 0xe80c17e8 (Join Protocol)
  type: 2
  use: During Join.  To verify that every node in leafset is aware of your existance, and gossip Leafset
  package: rice.pastry.standard
  
  format:
	  byte version (0)
    LeafSet ls
    boolean request
    int numInFailedSet
      NodeHandle failedHandle
      
/************* LeafSet Maintenance **************/
RequestLeafSet:
  address: 0xf921def1 (Leafset Protocol)
  type: 1
  use: Leafset Maintenance
  package: rice.pastry.leafset

  format: 
		byte version (0)
      
BroadcastLeafSet:
  address: 0xf921def1 (Leafset Protocol)
  type: 2
  use: Leafset Maintenance
  package: rice.pastry.leafset

  format:
	  byte version (0)
	  NodeHandle fromNode
	  LeafSet leafSet
	  int theType

/*************** Routing Table Maintenance **************/	    
RequestRouteRow:
  address: 0x89ce110e (Route Protocol)
  type: 1
  use: Routing Table Maintenance
  package: rice.pastry.routing

  format: 
		byte version (0)
		byte row // the row requested
		
BroadcastRouteRow:
  address: 0x89ce110e (Route Protocol)
  type: 2
  use: Routing Table Maintenance
  package rice.pastry.routing
    
  format:
	  byte version (0)
	  NodeHandle fromNode  
	  byte numRows
	    byte null? (0 if null, 1 if non-null)
	      RouteSet row // if non-null

/*************** CommonAPI impl ***************/
PastryEndpointMessage:
  address: taken from the underlieing endpoint
  type: 2
  use: Adapt a CommonAPI message to FreePastry (Adds an address) wraps the message
  package: rice.pastry.commonapi
  
  format:
    byte priority
    short type (the type of the sub message)
    CommonAPIMessage message
    
    