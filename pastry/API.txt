Pastry API:
===========


Classes:
------------------

NodeId

  represents a Pastry node identifier.


NodeIdAddrBind 

  represents a binding between a NodeId and an IP address.


PastryApp

  represents an application layered on top of Pastry


PastryAppId

  represents a self-certifying Pastry application identifier


Pastry

  represents Pastry on a given node




Pastry exported methods:
------------------------

Pastry.NodeIdAddrBind init(PCredentials cred);

  Called by a node's software to allow the local node to join an
  exisiting Pastry network. The call returns when the local node has
  successfully joined the network, or a failure has occurred.


  Args: 
      - cred: credentials, specific to a particular Pastry network
	      typically, the credentials contain
	      - a key pair associated with the local node
	      - port numbers used by the given Pastry network
	      - a list of IP addresses of existing Pastry nodes
	      - an IP multicast address used by the network

  Result:
	the address binding of the local node

  Exceptions:
	- JoinRefused: the local node was rejected 




boolean Pastry.registerApp(PastryApp app, PastryAppId appId);

  Called by a layered Pastry application to register itself with the
  identifier appId. Pastry subsequently tags all messages sent by the
  application with appId, and delivers all incoming messages with a
  tag equal to appId to the application.

  Args:
	- app: the local object representing the application
	- appId: the application identifier used by the application

  Result:
	true: success
	false: appId certification not recognized

XXX - promote PastryAppId to a credential? (allows access control to certain roite options)


Pastry.NodeIdAddrBind getLocalNodeId()

   Called by a layered Pastry application to obtain the local nodeId

   Result:

	local nodeId


boolean Pastry.routeMsg(Msg msg, NodeId key, Opts options);

  Called by a layered Pastry application to route a message to the live
  Pastry node whose nodeId is numerically closest to the key. 

  Args:
	- msg: the message to be routed
	- key: the key
	- options: a set of boolean flags (best effort)

	  - Default: take short routes, but balance load

	  - Opts.random: randomize the route (including non-local routes)

	  - Opts.noShortcuts: in each routing step, go to a node whose
            id matches the key in exactly one more digit. XXX - is
            this always possible? -> No

	  - Opts.shortestPath: in each routing step, go to the
            strictly nearest known node with appropriate nodeId.


  Result:
	- true: the message was successfully delivered to the next node
	- false: no appropriate next node could be located



boolean Pastry.routeMsgDirect(Msg msg, NodeIdAddrBind dest, Opts options);

  Called by a layered Pastry application to send a message to the
  Pastry node identified by dest. If that node has failed or no
  point-to-point connectiop can be established to the node from the
  local node in the Internet, the operation fails. Note that in this
  case, it may still be possible to send the message to that node
  using routeMsg.


  Args:
	- msg: the message to be routed
	- dest: the nodeId/IP-address binding of the destination
	- options: a set of boolean flags
	  - no options are currently defined 

  Result:
	- true: the message was successfully delivered to dest
	- false: a connection to dest could not be established



PastryDistance Pastry.getDistance(NodeId n);

  Called by a layered Pastry application to obtain the distance (in
  the proximity space) from the local node to the node with nodeId n.

  Args:
	- n: the node 

  Result:
	- distance, in term of the distance metric



NodeIdAddrBindSet Pastry.getLeafSet();

  Called by a layered Pastry application to obtain a copy of the leaf
  set. The leaf set contains the nodeId to IP address binding of the
  l/2 nodes with numerically closest smaller and the l/2 nodes with
  numerically closest larger nodeIds, relatively to the local node's
  id. 

  Result:
	- a order set of nodeId to IP address bindings




NodeIdAddrBindSet Pastry.getNeighborHoodSet();

  Called by a layered Pastry application to obtain a copy of the
  neighborhood set. The neighborhood set contains m nodes that are
  deemed close to the local node in the proximity space.  The m nodes
  are the closest live nodes in the Pastry network, they may not be
  reachable from the local node or have failed, and the set may change
  at any time.

  Result: - a set of nodeId to IP address bindings, ordered by nodeId.

XXX - does this go away?



NodeIdAddrBindArray Pastry.getRoutingTable();

  Called by a layered Pastry application to obtain a copy of the
  routing table. The routing table contains the nodeId to IP address
  bindings of R nodes that share the local node's id in the first n
  digits, and differ in the n+1th digit, for 0 <= n <= ceiling(log_2^b
  N), where N is the total number of currently live nodes in the
  Pastry network. The routing table may be incomplete, may contain
  nodes that cannot be reached from the local node or have failed, and
  the table may change at any time.


  Result:
	- a 4-d array of nodeId to IP address bindings, indexed by 
	    - row: length of prefix shared with local nodeId
	    - col: value of the first digit not shared with local nodeId
	    - rank: proximity rank of the associated node
            - locality: 0 - locality ranked; 1 - randomly chosen



void PastryApp.deliverMsg(Msg msg, NodeId key);

  Called by Pastry upon receiving a message whose key is numerically
  closest to the local node's nodeId, among all live Pastry nodes. The
  message may originate from any Pastry node, including the local
  node.

  Args:
	- msg: the received message
	- key: the message's key



boolean PastryApp.enRouteMsg(Msg msg, NodeId key, NodeId nextNode);

  Called by Pastry upon receiving a message whose key is not
  numerically closest to the local node's nodeId, among all live
  Pastry nodes. The message may originate from any Pastry node,
  including the local node.

  Args:
	- msg: the received message
	- key: the message's key
	- nextNode: the nodeId of the node to which the message will be sent 
		    next if the method returns the value true

	Note: All arguments are passed to this method by reference. The body
	      of enRouteMsg may change the values of all parameters.

  Res: 
       - true: causes msg to be forwarded to nextNode
       - false: cause the msg to be destoyed



void PastryApp.leafSetChange(boolean change, NodeIdAddrBind bind);

  Called by Pastry when there is a change in the local node's leaf
  set.

  Args:
	- chg: true: node joined the leaf set
	       false: node departed from the leaf set
	- bind: NodeId to IP address binding of the node that joined 
		or departed

XXX - provide copy of leafset as part of arguments, implicitly call in context of registerApp, removed get LeafSet?



void PastryApp.neighborhoodSetChange(boolean change, NodeIdAddrBind bind);

  Called by Pastry when there is a change in the local node's
  neighborhood set.

  Args:
	- chg: true: node joined the neighborhood set
	       false: node departed from the neighborhood set
	- bind: NodeId to IP address binding of the node that joined 
		or departed


XXX - delete?


void PastryApp.routeTableChange(int row, int col, int rank,
			        NodeIdAddrBind old, NodeIdAddrBind new);

  Called by Pastry when there is a change in the local node's routing
  table.

  Args:
	- row: the row of the affected routing table entry (0 is top)
	- col: the column of the affected routing table entry [0..2^b-1]
	- rank: the rank of the affected routing table entry [0 is closest]
	- locality: (see above)
	- old: the nodeId to IP address binding representing the old value
	       of the entry (possibly NULL)
	- new: the nodeId to IP address binding representing the new value
	       of the entry (possibly NULL)


XXX - fix problem of cascading updates (reduce to 2d?)
XXX - make private