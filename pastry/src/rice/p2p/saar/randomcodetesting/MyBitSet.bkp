import java.util.BitSet; 


// This is different from normal bitset with respect to providing an offset and two bitsets (negative and positive for integers less an greater than offset respectively
public class MyBitSet {

    int pivot = -1; // the offset 'boolean' value is reprsented in the index 0 of neg and pos set
    BitSet bitsetNegative;
    BitSet bitsetPositive;

    public MyBitSet(int p_pivot, boolean val) {
	pivot  = p_pivot;
	bitsetNegative = new BitSet();
	bitsetPositive = new BitSet();
	put(pivot, val);
    }


    public void put(int index, boolean val) {
	if(pivot == -1) {
	    // Bitset has not been initialized
	    return;
	} else if(index == pivot) {
	    if(val == true) {
		bitsetNegative.set(0);
		bitsetPositive.set(0);
	    } else {
		bitsetNegative.clear(0);
		bitsetPositive.clear(0);
	    }
	    
	} else if(index < pivot) {
	    int negOffset = pivot - index;
	    if(val == true) {
		bitsetNegative.set(negOffset);
	    } else {
		bitsetNegative.clear(negOffset);
	    }

	} else if(index > pivot) {
	    int posOffset = index - pivot;
	    if(val == true) {
		bitsetPositive.set(posOffset);
	    } else {
		bitsetPositive.clear(posOffset);
	    }

	}

    }


    public boolean get(int index) {
	if(pivot == -1) {
	    System.out.println("ERROR: Invoking get() on uninitialized pivot in MyBitSet");      
	    System.exit(1);
	} else if(index == pivot) {
	    return (bitsetNegative.get(0) && bitsetPositive.get(0));
	} else if(index < pivot) {
	    int negOffset = pivot - index;
	    return bitsetNegative.get(negOffset);
	} else if(index > pivot) {
	    int posOffset = index - pivot;
	    return bitsetPositive.get(posOffset);
	}
	return false;
    }

    // logical size in bits, as per functionality in BitSet
    public int length() {
	return (bitsetNegative.length() + 1 + bitsetPositive.length());

    }

    // actual bits consuimed in memory, as per functionality in BitSet
    public int size() {
	return (bitsetNegative.size() + 1 + bitsetPositive.size());

    }

    public String toString() {
	String s = "MyBitSet:pivot=" + pivot + ", negLen:" + bitsetNegative.length() + ", posLen: " + bitsetPositive.length();
	return s;
    }


    public static void main(String[] args) throws Exception {
	
	MyBitSet bitset = new MyBitSet(75, true);
	System.out.println("size(75):" + bitset.size() + ", len: " + bitset.length());
	bitset.put(100, true);
	System.out.println("size(75, 100):" + bitset.size() + ", len: " + bitset.length());
	bitset.put(50, true);
	System.out.println("size(75, 100, 50):" + bitset.size() + ", len: " + bitset.length());
	bitset.put(150, true);
	System.out.println("size(75, 100, 50, 150):" + bitset.size() + ", len: " + bitset.length());
	bitset.put(1000, true);
	System.out.println("size(75, 100, 50, 150, 1000):" + bitset.size() + ", len: " + bitset.length());



	System.out.println("size(75, 100, 50, 150, 1000): get(50)" + bitset.get(50) + ", len: " + bitset.length());
	
	System.out.println("size(75, 100, 50, 150, 1000): get(2000)" + bitset.get(2000) + ", len: " + bitset.length());
	
 	System.out.println("size(75, 100, 50, 150, 1000): get(75)" + bitset.get(75) + ", len: " + bitset.length());

	System.out.println("size(75, 100, 50, 150, 1000): get(100)" + bitset.get(100) + ", len: " + bitset.length());

	System.out.println("size(75, 100, 50, 150, 1000): get(50)" + bitset.get(50) + ", len: " + bitset.length());

	System.out.println("size(75, 100, 50, 150, 1000): get(150)" + bitset.get(150) + ", len: " + bitset.length());

	System.out.println("size(75, 100, 50, 150, 1000): get(200)" + bitset.get(200) + ", len: " + bitset.length());

     }
    

    
}



